
#include <cstdlib>
#include <math.h>
#include "uc8151.h"
#include "uc8151Defs.h"

UC8151::UC8151() : update_speed{3}, buffer{}
{
    initPico();
    sleep_ms(500);
    initDriver();
    sleep_ms(500);
}

bool UC8151::is_busy()
{
    return !gpio_get(busy);
}

void UC8151::busy_wait()
{
    while (is_busy())
    {
        tight_loop_contents();
    }
}

void UC8151::reset()
{
    gpio_put(resetPin, 0);
    sleep_ms(10);
    gpio_put(resetPin, 1);
    sleep_ms(10);
    busy_wait();
}

void UC8151::default_luts()
{
    command(LUT_VCOM, {0x00, 0x64, 0x64, 0x37, 0x00, 0x01,
                       0x00, 0x8c, 0x8c, 0x00, 0x00, 0x04,
                       0x00, 0x64, 0x64, 0x37, 0x00, 0x01,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00});

    command(LUT_WW, {0x54, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x60, 0x8c, 0x8c, 0x00, 0x00, 0x04,
                     0xa8, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BW, {0x54, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x60, 0x8c, 0x8c, 0x00, 0x00, 0x04,
                     0xa8, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_WB, {0xa8, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x60, 0x8c, 0x8c, 0x00, 0x00, 0x04,
                     0x54, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BB, {0xa8, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x60, 0x8c, 0x8c, 0x00, 0x00, 0x04,
                     0x54, 0x64, 0x64, 0x37, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    busy_wait();
}

void UC8151::medium_luts()
{

    command(LUT_VCOM, {0x00, 0x16, 0x16, 0x0d, 0x00, 0x01,
                       0x00, 0x23, 0x23, 0x00, 0x00, 0x02,
                       0x00, 0x16, 0x16, 0x0d, 0x00, 0x01,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00});

    command(LUT_WW, {0x54, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x60, 0x23, 0x23, 0x00, 0x00, 0x02,
                     0xa8, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BW, {0x54, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x60, 0x23, 0x23, 0x00, 0x00, 0x02,
                     0xa8, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_WB, {0xa8, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x60, 0x23, 0x23, 0x00, 0x00, 0x02,
                     0x54, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BB, {0xa8, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x60, 0x23, 0x23, 0x00, 0x00, 0x02,
                     0x54, 0x16, 0x16, 0x0d, 0x00, 0x01,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    busy_wait();
}

void UC8151::fast_luts()
{
    // 0x3c, 0x00, 0x2b, 0x2b, 0x24, 0x1a, ????
    command(LUT_VCOM, {0x00, 0x04, 0x04, 0x07, 0x00, 0x01,
                       0x00, 0x0c, 0x0c, 0x00, 0x00, 0x02,
                       0x00, 0x04, 0x04, 0x07, 0x00, 0x02,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00});

    command(LUT_WW, {0x54, 0x04, 0x04, 0x07, 0x00, 0x01,
                     0x60, 0x0c, 0x0c, 0x00, 0x00, 0x02,
                     0xa8, 0x04, 0x04, 0x07, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BW, {0x54, 0x04, 0x04, 0x07, 0x00, 0x01,
                     0x60, 0x0c, 0x0c, 0x00, 0x00, 0x02,
                     0xa8, 0x04, 0x04, 0x07, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_WB, {0xa8, 0x04, 0x04, 0x07, 0x00, 0x01,
                     0x60, 0x0c, 0x0c, 0x00, 0x00, 0x02,
                     0x54, 0x04, 0x04, 0x07, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BB, {0xa8, 0x04, 0x04, 0x07, 0x00, 0x01,
                     0x60, 0x0c, 0x0c, 0x00, 0x00, 0x02,
                     0x54, 0x04, 0x04, 0x07, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(PLL, {HZ_200});

    busy_wait();
}

void UC8151::turbo_luts()
{
    // 0x3c, 0x00, 0x2b, 0x2b, 0x24, 0x1a, ????
    command(LUT_VCOM, {0x00, 0x01, 0x01, 0x02, 0x00, 0x01,
                       0x00, 0x02, 0x02, 0x00, 0x00, 0x02,
                       0x00, 0x02, 0x02, 0x03, 0x00, 0x02,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00});

    command(LUT_WW, {0x54, 0x01, 0x01, 0x02, 0x00, 0x01,
                     0x60, 0x02, 0x02, 0x00, 0x00, 0x02,
                     0xa8, 0x02, 0x02, 0x03, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BW, {0x54, 0x01, 0x01, 0x02, 0x00, 0x01,
                     0x60, 0x02, 0x02, 0x00, 0x00, 0x02,
                     0xa8, 0x02, 0x02, 0x03, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_WB, {0xa8, 0x01, 0x01, 0x02, 0x00, 0x01,
                     0x60, 0x02, 0x02, 0x00, 0x00, 0x02,
                     0x54, 0x02, 0x02, 0x03, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(LUT_BB, {0xa8, 0x01, 0x01, 0x02, 0x00, 0x01,
                     0x60, 0x02, 0x02, 0x00, 0x00, 0x02,
                     0x54, 0x02, 0x02, 0x03, 0x00, 0x02,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00});

    command(PLL, {HZ_200});

    busy_wait();
}

void UC8151::initPico()
{
    // configure spi interface and pins
    spi_init(spi0, 12'000'000);

    gpio_set_function(DC, GPIO_FUNC_SIO);
    gpio_set_dir(DC, GPIO_OUT);

    gpio_set_function(CS, GPIO_FUNC_SIO);
    gpio_set_dir(CS, GPIO_OUT);
    gpio_put(CS, 1);

    gpio_set_function(resetPin, GPIO_FUNC_SIO);
    gpio_set_dir(resetPin, GPIO_OUT);
    gpio_put(resetPin, 1);

    gpio_set_function(busy, GPIO_FUNC_SIO);
    gpio_set_dir(busy, GPIO_IN);
    gpio_set_pulls(busy, true, false);

    gpio_set_function(SCK, GPIO_FUNC_SPI);
    gpio_set_function(MOSI, GPIO_FUNC_SPI);
};

void UC8151::initDriver()
{
    uint8_t psr_setting = RES_128x296 | FORMAT_BW | BOOSTER_ON | RESET_NONE | LUT_OTP | SHIFT_RIGHT | SCAN_DOWN;

    command(PSR, 1, &psr_setting);

    switch (update_speed)
    {
    case 0:
        // Use the predefined default luts
        break;
    case 1:
        medium_luts();
        break;
    case 2:
        fast_luts();
        break;
    case 3:
        turbo_luts();
        break;
    default:
        break;
    }

    command(PWR, {VDS_INTERNAL | VDG_INTERNAL,
                  VCOM_VD | VGHL_16V,
                  0b101011,
                  0b101011,
                  0b101011});

    command(PON); // power on
    // Busy wait in ms
    busy_wait();

    // booster soft start configuration
    command(BTST, {START_10MS | STRENGTH_3 | OFF_6_58US,
                   START_10MS | STRENGTH_3 | OFF_6_58US,
                   START_10MS | STRENGTH_3 | OFF_6_58US});

    command(PFS, {FRAMES_1});

    command(TSE, {TEMP_INTERNAL | OFFSET_0});

    command(TCON, {0x22});                                             // tcon setting
    command(CDI, {(uint8_t)(inverted ? 0b10'01'1100 : 0b01'00'1100)}); // vcom and data interval

    command(PLL, {HZ_100});

    command(POF);
    busy_wait();
}

void UC8151::power_off()
{
    command(POF);
}

void UC8151::read(uint8_t reg, size_t len, uint8_t *data)
{
    gpio_put(CS, 0);

    gpio_put(DC, 0); // command mode
    spi_write_blocking(spi0, &reg, 1);

    if (len > 0)
    {
        gpio_put(DC, 1); // data mode
        gpio_set_function(SCK, GPIO_FUNC_SIO);
        gpio_set_dir(SCK, GPIO_OUT);
        gpio_set_function(MOSI, GPIO_FUNC_SIO);
        gpio_set_dir(MOSI, GPIO_IN);
        for (auto i = 0u; i < len; i++)
        {
            int byte = i / 8;
            int bit = i % 8;
            gpio_put(SCK, true);
            bool value = gpio_get(MOSI);
            data[byte] |= value << (7 - bit);
            gpio_put(SCK, false);
        }

        gpio_set_function(SCK, GPIO_FUNC_SPI);
        gpio_set_function(MOSI, GPIO_FUNC_SPI);
    }

    gpio_put(CS, 1);
}

void UC8151::command(uint8_t reg, size_t len, const uint8_t *data)
{
    gpio_put(CS, 0);

    gpio_put(DC, 0); // command mode
    spi_write_blocking(spi0, &reg, 1);

    if (len > 0)
    {
        gpio_put(DC, 1); // data mode
        spi_write_blocking(spi0, (const uint8_t *)data, len);
    }

    gpio_put(CS, 1);
}

void UC8151::data(size_t len, const uint8_t *data)
{
    gpio_put(CS, 0);
    gpio_put(DC, 1); // data mode
    spi_write_blocking(spi0, (const uint8_t *)data, len);
    gpio_put(CS, 1);
}

void UC8151::command(uint8_t reg, std::initializer_list<uint8_t> values)
{
    command(reg, values.size(), (uint8_t *)values.begin());
}

bool UC8151::set_update_speed(int update_speed)
{
    this->update_speed = (uint8_t)update_speed;
    initDriver();
    return true;
}

uint32_t UC8151::update_time()
{
    switch (update_speed)
    {
    case 0:
        return 4500;
    case 1:
        return 2000;
    case 2:
        return 800;
    case 3:
        return 250;
    default:
        return 4500;
    }
}

void UC8151::update()
{
    if (blocking)
    {
        busy_wait();
    }
    command(PON);
    command(PTOU);
    command(DTM2, FRAMEBUFFERSIZE, buffer.data);
    command(DSP);
    command(DRF);
    if (blocking)
    {
        off();
    }
}

void UC8151::clear()
{
    buffer.clear();
}

void UC8151::set(int x, int y)
{
    buffer.set(Point(x,y));
}

void UC8151::off()
{
    busy_wait();
    command(POF); // turn off
}